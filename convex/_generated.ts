/* eslint-disable */
// Generated by @convex-dev/cli@0.0.67
// based on the contents of this directory.
// To regenerate, run `convex codegen`.
import type { addChoice as addingChoices__addChoice } from "./addingChoices";
import type { doneAdding as addingChoices__doneAdding } from "./addingChoices";
import type { startVoting as addingChoices__startVoting } from "./addingChoices";
import type getInstance from "./getInstance";
import type loggedInUser from "./loggedInUser";
import type startInstance from "./startInstance";
import type { changeVote as voting__changeVote } from "./voting";
import type { currentRanking as voting__currentRanking } from "./voting";
import type { doneVoting as voting__doneVoting } from "./voting";

import type { MutationCtx, QueryCtx } from "@convex-dev/server";
type DropFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never;
type ClientMutation<F extends (first: MutationCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;
type ClientQuery<F extends (first: QueryCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;

type ConvexAPI = {
  queries: {
    getInstance: ClientQuery<typeof getInstance>;
    loggedInUser: ClientQuery<typeof loggedInUser>;
    "voting:currentRanking": ClientQuery<typeof voting__currentRanking>;
  };
  mutations: {
    "addingChoices:addChoice": ClientMutation<typeof addingChoices__addChoice>;
    "addingChoices:doneAdding": ClientMutation<typeof addingChoices__doneAdding>;
    "addingChoices:startVoting": ClientMutation<typeof addingChoices__startVoting>;
    startInstance: ClientMutation<typeof startInstance>;
    "voting:changeVote": ClientMutation<typeof voting__changeVote>;
    "voting:doneVoting": ClientMutation<typeof voting__doneVoting>;
  };
};

import {
  makeUseQuery,
  makeUseMutation,
  makeUseConvex,
} from "@convex-dev/react";

export const useQuery = makeUseQuery<ConvexAPI>();
export const useMutation = makeUseMutation<ConvexAPI>();
export const useConvex = makeUseConvex<ConvexAPI>();
